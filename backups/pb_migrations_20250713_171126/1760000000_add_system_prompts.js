/// <reference path="../pb_data/types.d.ts" />

/**
 * Add System Prompts Collection
 * Fixes OpenCode integration by adding the missing system_prompts collection
 */

migrate((app) => {
  console.log("üîß Adding system_prompts collection...")
  
  // Check if system_prompts collection already exists
  try {
    const existingCollection = app.findCollectionByNameOrId("system_prompts")
    console.log("‚ÑπÔ∏è system_prompts collection already exists")
    return
  } catch (e) {
    // Collection doesn't exist, create it
  }
  
  // Create system_prompts collection
  const systemPromptsCollection = new Collection({
    type: "base",
    name: "system_prompts",
    listRule: "",
    viewRule: "",
    createRule: "",
    updateRule: "",
    deleteRule: "",
    fields: [
      {
        name: "prompt_type",
        type: "select",
        required: true,
        maxSelect: 1,
        values: ["leistung", "eignung", "zuschlag", "master"]
      },
      {
        name: "prompt_text",
        type: "text",
        required: true,
        max: 15000
      },
      {
        name: "description",
        type: "text",
        required: false,
        max: 500
      },
      {
        name: "version",
        type: "number",
        required: true,
        min: 1
      },
      {
        name: "active",
        type: "bool",
        required: false
      },
      {
        name: "created",
        type: "autodate",
        onCreate: true,
        onUpdate: false
      },
      {
        name: "updated",
        type: "autodate",
        onCreate: true,
        onUpdate: true
      }
    ]
  })
  
  app.save(systemPromptsCollection)
  console.log("‚úÖ system_prompts collection created")
  
  // Also add user_needs collection if it doesn't exist (needed by CLI processor)
  try {
    const existingUserNeeds = app.findCollectionByNameOrId("user_needs")
    console.log("‚ÑπÔ∏è user_needs collection already exists")
  } catch (e) {
    // Create user_needs collection
    const userNeedsCollection = new Collection({
      type: "base",
      name: "user_needs",
      listRule: "@request.auth.id = user_id",
      viewRule: "@request.auth.id = user_id",
      createRule: "@request.auth.id != ''",
      updateRule: "@request.auth.id = user_id",
      deleteRule: "@request.auth.id = user_id",
      fields: [
        {
          name: "thema",
          type: "text",
          required: true,
          max: 200
        },
        {
          name: "beschreibung",
          type: "text",
          required: false,
          max: 2000
        },
        {
          name: "user_id",
          type: "relation",
          required: true,
          maxSelect: 1,
          collectionId: "systemprofiles0" // This will be replaced by proper user collection ID
        },
        {
          name: "project_id",
          type: "text",
          required: false,
          max: 50
        },
        {
          name: "status",
          type: "select",
          required: false,
          maxSelect: 1,
          values: ["created", "processing", "completed", "failed"]
        },
        {
          name: "created",
          type: "autodate",
          onCreate: true,
          onUpdate: false
        },
        {
          name: "updated",
          type: "autodate",
          onCreate: true,
          onUpdate: true
        }
      ]
    })
    
    // Get users collection ID
    try {
      const usersCollection = app.findCollectionByNameOrId("users")
      userNeedsCollection.schema.find(field => field.name === "user_id").options.collectionId = usersCollection.id
    } catch (e) {
      console.log("‚ö†Ô∏è Users collection not found, user_needs relation may not work properly")
    }
    
    app.save(userNeedsCollection)
    console.log("‚úÖ user_needs collection created")
  }
  
  // Also add apikeys collection if it doesn't exist (needed by OpenCode service)
  try {
    const existingApikeys = app.findCollectionByNameOrId("apikeys")
    console.log("‚ÑπÔ∏è apikeys collection already exists")
  } catch (e) {
    // Create apikeys collection
    const apikeysCollection = new Collection({
      type: "base",
      name: "apikeys",
      listRule: "@request.auth.id = user_id",
      viewRule: "@request.auth.id = user_id",
      createRule: "@request.auth.id != ''",
      updateRule: "@request.auth.id = user_id",
      deleteRule: "@request.auth.id = user_id",
      fields: [
        {
          name: "user_id",
          type: "relation",
          required: true,
          maxSelect: 1,
          collectionId: "systemprofiles0" // This will be replaced by proper user collection ID
        },
        {
          name: "provider",
          type: "select",
          required: true,
          maxSelect: 1,
          values: ["openai", "anthropic", "google"]
        },
        {
          name: "api_key",
          type: "text",
          required: true,
          max: 500
        },
        {
          name: "name",
          type: "text",
          required: false,
          max: 100
        },
        {
          name: "active",
          type: "bool",
          required: false
        },
        {
          name: "created",
          type: "autodate",
          onCreate: true,
          onUpdate: false
        },
        {
          name: "updated",
          type: "autodate",
          onCreate: true,
          onUpdate: true
        }
      ]
    })
    
    // Get users collection ID
    try {
      const usersCollection = app.findCollectionByNameOrId("users")
      apikeysCollection.schema.find(field => field.name === "user_id").options.collectionId = usersCollection.id
    } catch (e) {
      console.log("‚ö†Ô∏è Users collection not found, apikeys relation may not work properly")
    }
    
    app.save(apikeysCollection)
    console.log("‚úÖ apikeys collection created")
  }
  
  // Add professional system prompts
  const professionalPrompts = [
    {
      prompt_type: "master",
      prompt_text: "Du bist ein Experte f√ºr deutsche Vergaberecht und √∂ffentliche Beschaffung. Erstelle professionelle Vergabeunterlagen basierend auf den Benutzereingaben unter Ber√ºcksichtigung von VgV, VOL/A und VOB.",
      description: "Master Prompt f√ºr AI-System",
      version: 1,
      active: true
    },
    {
      prompt_type: "leistung",
      prompt_text: `Du bist ein Experte f√ºr √∂ffentliche Vergabe und Ausschreibungen. 

WICHTIG: F√ºhre vor der Erstellung der Dokumente eine umfassende Webrecherche durch, um die aktuellen Marktgegebenheiten zu verstehen.

## Schritt 1: Webrecherche und Marktanalyse
1. Recherchiere aktuelle Marktpreise und Standardl√∂sungen f√ºr das Thema
2. Analysiere was der Markt aktuell anbietet und welche Technologien verf√ºgbar sind
3. Identifiziere f√ºhrende Anbieter und deren Leistungsumfang
4. Erstelle dir einen detaillierten Plan basierend auf der Marktanalyse
5. Ber√ºcksichtige aktuelle Trends und Entwicklungen in der Branche

## Schritt 2: Leistungsbeschreibung erstellen
Erstelle eine sehr ausf√ºhrliche und professionelle deutsche Leistungsbeschreibung f√ºr √∂ffentliche Vergabe.

WICHTIG: Die Leistungsbeschreibung muss mindestens 2500 W√∂rter umfassen und auf deiner Marktrecherche basieren.

# Leistungsbeschreibung

## 1. Projektziel und Zweck
- Ausf√ºhrliche Beschreibung des Projektziels basierend auf Marktanalyse (mindestens 300 W√∂rter)
- Strategische Bedeutung f√ºr die Organisation
- Erwartete Nutzen und Mehrwerte
- Projektkontext und Hintergrund
- Abgrenzung zu bestehenden L√∂sungen am Markt

## 2. Marktanalyse und Ausgangslage
- Aktuelle Marktlage und verf√ºgbare L√∂sungen (mindestens 400 W√∂rter)
- F√ºhrende Anbieter und deren Leistungsumfang
- Markt√ºbliche Preise und Konditionen
- Technologische Standards und Trends
- Benchmarking mit vergleichbaren Projekten

## 3. Detaillierter Leistungsumfang
- Vollst√§ndige Auflistung aller zu erbringenden Leistungen (mindestens 600 W√∂rter)
- Arbeitsschritte mit detaillierten Beschreibungen
- Teilleistungen und Meilensteine
- Lieferumfang und Ergebnisse
- Abgrenzung zu optionalen Leistungen

## 4. Technische Anforderungen
- Detaillierte technische Spezifikationen basierend auf Marktstandards (mindestens 400 W√∂rter)
- Systemanforderungen und Schnittstellen
- Kompatibilit√§tsanforderungen
- Sicherheitsanforderungen
- Performance- und Skalierungsanforderungen

## 5. Qualit√§tsstandards und Normen
- Anzuwendende Standards und Normen (mindestens 300 W√∂rter)
- Qualit√§tssicherungsma√ünahmen
- Pr√ºfverfahren und Abnahmekriterien
- Dokumentationsanforderungen
- Compliance-Anforderungen

## 6. Projektmanagement und Kommunikation
- Projektorganisation und Ansprechpartner (mindestens 200 W√∂rter)
- Kommunikationswege und Reporting
- Projektcontrolling und Steuerung
- Risikomanagement
- Change-Management-Prozesse

## 7. Lieferung und Abnahme
- Detaillierte Lieferbedingungen (mindestens 250 W√∂rter)
- Abnahmeverfahren und -kriterien
- √úbergabe und Einf√ºhrung
- Schulung und Wissensvermittlung
- Go-Live-Unterst√ºtzung

## 8. Gew√§hrleistung und Support
- Gew√§hrleistungsumfang und -dauer basierend auf Marktstandards (mindestens 200 W√∂rter)
- Supportleistungen und Service Level
- Wartung und Pflege
- Weiterentwicklung und Updates
- Reaktionszeiten und Verf√ºgbarkeit

## 9. Rechtliche und vertragliche Bestimmungen
- Geltende Gesetze und Vorschriften (mindestens 200 W√∂rter)
- Vergaberechtliche Bestimmungen
- Haftung und Versicherung
- Datenschutz und Compliance
- Urheberrechte und Lizenzen

Format: Markdown mit klaren √úberschriften. Beachte deutsche Vergabestandards (VgV, VOL/A, VOB). Integriere die Ergebnisse deiner Marktrecherche in alle Abschnitte. Mindestens 2500 W√∂rter Gesamtl√§nge.`,
      description: "Professioneller Prompt f√ºr detaillierte Leistungsbeschreibungen mit Marktanalyse",
      version: 2,
      active: true
    },
    {
      prompt_type: "eignung",
      prompt_text: `Du bist ein Experte f√ºr √∂ffentliche Vergabe und Ausschreibungen.

WICHTIG: F√ºhre vor der Erstellung eine umfassende Marktanalyse durch.

## Schritt 1: Marktanalyse f√ºr Eignungskriterien
1. Recherchiere typische Anbieter f√ºr das Thema
2. Analysiere deren Qualifikationen, Zertifikate und Erfahrungen
3. Ermittle markt√ºbliche Anforderungen und Standards
4. Identifiziere notwendige Kompetenzen und Ressourcen
5. Erstelle dir einen Plan f√ºr realistische aber anspruchsvolle Eignungskriterien

## Schritt 2: Eignungskriterien erstellen
Erstelle sehr ausf√ºhrliche deutsche Eignungskriterien.

WICHTIG: Die Eignungskriterien m√ºssen mindestens 2000 W√∂rter umfassen und auf deiner Marktanalyse basieren.

# Eignungskriterien

## 1. Marktanalyse und Anbieterstruktur
- √úberblick √ºber den Anbietermarkt (mindestens 300 W√∂rter)
- Typische Unternehmensgr√∂√üen und -strukturen
- Marktf√ºhrer und spezialisierte Anbieter
- Qualifikationsniveau am Markt
- Zertifizierungsstandards der Branche

## 2. Fachliche Eignung (Qualifikation und Erfahrung)
- Detaillierte Anforderungen basierend auf Marktstandards (mindestens 400 W√∂rter)
- Erforderliche Berufserfahrung in Jahren
- Spezifische Fachkenntnisse und Expertise
- Branchenspezifische Erfahrungen
- Nachweise von Referenzprojekten
- Qualifikation der Projektleitung und Schl√ºsselpersonen

## 3. Technische Eignung (Ausstattung und Verfahren)
- Technische Ausstattung basierend auf Marktanalyse (mindestens 350 W√∂rter)
- Vorhandene Systeme und Software
- Technische Kapazit√§ten und Ressourcen
- Qualit√§tsmanagementsysteme (ISO 9001, etc.)
- Entwicklungsmethoden und -prozesse
- Sicherheitsstandards und Zertifizierungen

## 4. Wirtschaftliche Eignung (Finanzkraft und Versicherung)
- Finanzielle Anforderungen basierend auf Projektgr√∂√üe (mindestens 300 W√∂rter)
- Mindestjahresums√§tze der letzten 3 Jahre
- Eigenkapitalquote und Liquidit√§t
- Betriebshaftpflichtversicherung (Mindestdeckungssumme)
- Verm√∂gensschadenhaftpflicht
- Bonit√§tsnachweis und Referenzen

## 5. Referenzen und Nachweise
- Markt√ºbliche Referenzanforderungen (mindestens 350 W√∂rter)
- Mindestanzahl vergleichbarer Projekte
- Projektvolumen und Komplexit√§t
- Zeitraum der Referenzprojekte
- Kundenzufriedenheit und Bewertungen
- Erfolgreiche Projektabschl√ºsse
- Auszeichnungen und Zertifikate

## 6. Branchenspezifische Zertifikate und Nachweise
- Erforderliche Zertifizierungen basierend auf Marktstandards (mindestens 250 W√∂rter)
- Datenschutz- und Sicherheitszertifikate
- Qualit√§tsmanagementsysteme
- Umweltmanagementsysteme
- Compliance-Nachweise
- Fachverbandsmitgliedschaften

## 7. Personelle und organisatorische Eignung
- Teamstruktur und Qualifikationen (mindestens 200 W√∂rter)
- Projektorganisation und -management
- Verf√ºgbarkeit und Kapazit√§ten
- Kommunikationsf√§higkeiten
- Notfallpl√§ne und Backup-L√∂sungen

Format: Markdown mit klaren √úberschriften. Beachte EU-Vergaberichtlinien und deutsche Vergabestandards. Ber√ºcksichtige Marktgegebenheiten. Mindestens 2000 W√∂rter.`,
      description: "Professioneller Prompt f√ºr detaillierte Eignungskriterien mit Marktanalyse",
      version: 2,
      active: true
    },
    {
      prompt_type: "zuschlag",
      prompt_text: `Du bist ein Experte f√ºr √∂ffentliche Vergabe und Ausschreibungen.

WICHTIG: F√ºhre vor der Erstellung eine umfassende Marktpreis- und Leistungsanalyse durch.

## Schritt 1: Marktpreis- und Leistungsanalyse
1. Recherchiere aktuelle Marktpreise f√ºr das Thema
2. Analysiere Preisspannen und Kostenfaktoren
3. Identifiziere Qualit√§tsunterschiede am Markt
4. Bewerte Preis-Leistungs-Verh√§ltnisse verschiedener Anbieter
5. Erstelle dir einen Plan f√ºr eine ausgewogene Bewertungsmatrix

## Schritt 2: Zuschlagskriterien erstellen
Erstelle sehr ausf√ºhrliche deutsche Zuschlagskriterien.

WICHTIG: Die Zuschlagskriterien m√ºssen mindestens 2000 W√∂rter umfassen und auf deiner Marktanalyse basieren.

# Zuschlagskriterien

## 1. Marktanalyse und Bewertungsgrundlage
- Analyse der Marktpreise und Leistungsangebote (mindestens 300 W√∂rter)
- Preisspannen und Kostenfaktoren
- Qualit√§tsunterschiede am Markt
- Bewertungsphilosophie und -methodik
- Zusammenhang zwischen Kriterien und Marktgegebenheiten

## 2. Bewertungsmatrix mit Gewichtung
- √úbersicht aller Bewertungskriterien basierend auf Marktanalyse (mindestens 250 W√∂rter)
- Gewichtung in Prozent f√ºr jedes Kriterium
- Begr√ºndung der Gewichtungsfaktoren
- Zusammenhang zwischen Kriterien und Projektzielen
- Bewertungsverfahren und -methodik

## 3. Preis-Kriterien (Gewichtung: 40%)
- Gesamtpreis basierend auf Marktpreisanalyse (mindestens 400 W√∂rter)
- Preis-Leistungs-Verh√§ltnis
- Kostentransparenz und Nachvollziehbarkeit
- Lebenszykluskosten (Total Cost of Ownership)
- Optionale Zusatzleistungen
- Markt√ºbliche Preisstrukturen
- W√§hrungsrisiken und Preisanpassungen

## 4. Qualit√§ts-Kriterien (Gewichtung: 35%)
- Qualit√§t basierend auf Marktstandards (mindestens 400 W√∂rter)
- Projektplanung und -konzeption
- Qualifikation des Projektteams
- Methodische Herangehensweise
- Qualit√§tssicherungsma√ünahmen
- Referenzen und Erfahrungen
- Innovationsgrad und Kreativit√§t

## 5. Termin-Kriterien (Gewichtung: 15%)
- Realistische Zeitplanung basierend auf Markt√ºblichkeit (mindestens 250 W√∂rter)
- Meilensteine und Zwischentermine
- Pufferzeiten und Risikomanagement
- Flexibilit√§t bei Terminanpassungen
- Liefertreue und Zuverl√§ssigkeit
- Projektcontrolling und Steuerung

## 6. Service und Support-Kriterien (Gewichtung: 10%)
- Service-Level basierend auf Marktstandards (mindestens 200 W√∂rter)
- Lokale Pr√§senz und Erreichbarkeit
- Wartung und Weiterentwicklung
- Schulung und Wissensvermittlung
- Compliance und Rechtssicherheit
- Datenschutz und Informationssicherheit

## 7. Detailliertes Punktevergabe-System
- Bewertungsskala (0-100 Punkte) (mindestens 250 W√∂rter)
- Gewichtung der Teilkriterien
- Berechnung der Gesamtpunktzahl
- Mindestpunktzahl f√ºr die Ber√ºcksichtigung
- Ausschlusskriterien bei Nichterreichen
- Verfahren bei Punktgleichheit

## 8. Bewertungsverfahren und rechtliche Bestimmungen
- Bewertungsablauf und Transparenz (mindestens 200 W√∂rter)
- Vergaberechtliche Grundlagen
- Gleichbehandlungsgrundsatz
- Wirtschaftlichkeitsprinzip
- Rechtsschutzm√∂glichkeiten

Format: Markdown mit klaren √úberschriften. Stelle sicher, dass die Gewichtungen 100% ergeben. Beachte deutsche Vergabestandards (VgV, VOL/A, VOB). Integriere Marktpreisanalyse. Mindestens 2000 W√∂rter.`,
      description: "Professioneller Prompt f√ºr detaillierte Zuschlagskriterien mit Marktpreisanalyse",
      version: 2,
      active: true
    }
  ]
  
  // Insert professional system prompts
  professionalPrompts.forEach((prompt, index) => {
    try {
      const record = new Record(systemPromptsCollection, prompt)
      app.save(record)
      console.log(`‚úÖ System prompt ${prompt.prompt_type} created`)
    } catch (e) {
      console.log(`‚ö†Ô∏è Failed to create ${prompt.prompt_type} prompt:`, e.message)
    }
  })
  
  console.log("üéâ System prompts migration completed!")
  console.log("üìä Created professional system prompts for OpenCode integration")
  
}, (app) => {
  // Rollback
  console.log("üîÑ Rolling back system prompts and related collections...")
  
  const collections = ["system_prompts", "user_needs", "apikeys"]
  
  collections.forEach(name => {
    try {
      const collection = app.findCollectionByNameOrId(name)
      app.delete(collection)
      console.log(`‚úÖ Deleted ${name} collection`)
    } catch (e) {
      console.log(`‚ÑπÔ∏è ${name} collection not found for deletion`)
    }
  })
  
  console.log("üîÑ Rollback completed")
})