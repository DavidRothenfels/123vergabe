name: Build and Push Docker Image

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: davidrothenfels/123vergabe

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate artifact attestation
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build-and-push.outputs.digest }}
        push-to-registry: true

    - name: Test container locally
      run: |
        echo "Testing built container..."
        CONTAINER_ID=$(docker run -d \
          --name 123vergabe-test \
          -p 8090:8090 \
          -e OPENAI_API_KEY="test-key" \
          ghcr.io/davidrothenfels/123vergabe:master)
        
        echo "Container started with ID: $CONTAINER_ID"
        
        # Wait for services to start with intelligent retry
        echo "Waiting for services to start..."
        MAX_WAIT=30
        WAIT_TIME=0
        
        while [ $WAIT_TIME -lt $MAX_WAIT ]; do
          if curl -f -s http://localhost:8090/api/health > /dev/null 2>&1; then
            echo "‚úÖ PocketBase is ready after ${WAIT_TIME}s"
            break
          fi
          echo "‚è≥ Waiting for PocketBase... (${WAIT_TIME}s elapsed)"
          sleep 5
          WAIT_TIME=$((WAIT_TIME + 5))
        done
        
        echo "Container logs:"
        docker logs 123vergabe-test | tail -20
        
        echo "Container status:"
        docker ps -a | grep 123vergabe-test
        
        # Test health endpoints with retries
        echo "Testing health endpoints..."
        
        # Test PocketBase health (with retries)
        for i in {1..5}; do
          echo "Attempt $i: Testing PocketBase health..."
          if curl -f http://localhost:8090/api/health; then
            echo "‚úÖ PocketBase health check passed"
            break
          else
            echo "‚ùå PocketBase health check failed, retrying in 10s..."
            sleep 10
          fi
          if [ $i -eq 5 ]; then
            echo "‚ùå PocketBase health check failed after 5 attempts"
            docker logs 123vergabe-test
            exit 1
          fi
        done
        
        
        # Cleanup
        docker stop 123vergabe-test
        echo "Container test passed!"

  security-scan:
    runs-on: ubuntu-latest
    # Run in parallel, not blocking deployment
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  deploy-coolify:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: Trigger Coolify Deployment
      run: |
        echo "üöÄ Triggering Coolify deployment..."
        curl -X GET "https://app.coolify.io/api/v1/deploy?uuid=o0owo080gg840wkkkgws0ckc&force=false" \
          -H "Authorization: Bearer ${{ secrets.COOLIFY_WEBHOOK_TOKEN }}" \
          -w "\nHTTP Status: %{http_code}\n"
      continue-on-error: true