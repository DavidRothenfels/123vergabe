#!/usr/bin/env node

/**
 * Simple test for OpenCode service integration
 */

const fetch = require('node-fetch')

async function testOpenCode() {
    console.log('üß™ Testing OpenCode Service Integration')
    console.log('=====================================')
    
    try {
        // Test 1: Health check
        console.log('‚ù§Ô∏è Step 1: Health check...')
        const healthResponse = await fetch('http://localhost:3001/health')
        if (healthResponse.ok) {
            const healthData = await healthResponse.json()
            console.log('‚úÖ OpenCode service is healthy:', healthData.status)
        } else {
            throw new Error('OpenCode service not responding')
        }
        
        // Test 2: Simple prompt generation (with placeholder API key)
        console.log('ü§ñ Step 2: Testing document generation...')
        
        const testPrompt = `Du bist ein Experte f√ºr √∂ffentliche Vergabe und Ausschreibungen. 

WICHTIG: F√ºhre vor der Erstellung der Dokumente eine umfassende Webrecherche durch, um die aktuellen Marktgegebenheiten zu verstehen.

## Schritt 1: Webrecherche und Marktanalyse
1. Recherchiere aktuelle Marktpreise und Standardl√∂sungen f√ºr das Thema
2. Analysiere was der Markt aktuell anbietet und welche Technologien verf√ºgbar sind
3. Identifiziere f√ºhrende Anbieter und deren Leistungsumfang
4. Erstelle dir einen detaillierten Plan basierend auf der Marktanalyse
5. Ber√ºcksichtige aktuelle Trends und Entwicklungen in der Branche

## Schritt 2: Leistungsbeschreibung erstellen
Erstelle eine sehr ausf√ºhrliche und professionelle deutsche Leistungsbeschreibung f√ºr √∂ffentliche Vergabe.

WICHTIG: Die Leistungsbeschreibung muss mindestens 2500 W√∂rter umfassen und auf deiner Marktrecherche basieren.

## Projektdaten f√ºr die Erstellung:

**Projekttitel:** Test Webseiten-Entwicklung Kommune

**Projektbeschreibung:** Entwicklung einer modernen, benutzerfreundlichen Webseite f√ºr die kommunale Verwaltung mit integrierten B√ºrgerservices, Online-Antragsformularen und barrierefreiem Design

**Projektkontext:** 
- Projekt-ID: test-project-123
- Status: Neu
- Erstellt am: ${new Date().toISOString()}

WICHTIG: 
1. Verwende KEINE R√ºckfragen - erstelle das Dokument direkt basierend auf den verf√ºgbaren Projektdaten
2. F√ºhre eine umfassende Webrecherche durch bevor du das Dokument erstellst
3. Das Dokument muss vollst√§ndig und einsatzbereit sein
4. Verwende professionelle deutsche Sprache entsprechend Vergabestandards
5. Ber√ºcksichtige aktuelle Marktgegebenheiten in deiner Analyse`

        const url = `http://localhost:3001/opencode/stream?prompt=${encodeURIComponent(testPrompt)}&model=openai/gpt-4.1-mini&userId=test-user&userKey=test-api-key&recordId=test-record&projectId=test-project`
        
        console.log('üì§ Sending request to OpenCode...')
        const response = await fetch(url)
        
        if (!response.ok) {
            throw new Error(`OpenCode request failed: ${response.status} ${response.statusText}`)
        }
        
        // Read response content
        console.log('üì° Reading response...')
        const content = await response.text()
        
        console.log(`‚úÖ Received ${content.length} characters`)
        
        // Clean up the response
        const cleanContent = content
            .replace(/\[ERR\].*?\n/g, '')
            .replace(/\[‚úî.*?\]/g, '')
            .trim()
        
        console.log(`üìÑ Clean content length: ${cleanContent.length} characters`)
        
        if (cleanContent.length > 100) {
            console.log('üéâ SUCCESS: Document generation appears to be working!')
            console.log('üìã First 200 characters of generated content:')
            console.log('---')
            console.log(cleanContent.substring(0, 200) + '...')
            console.log('---')
            
            // Check if it contains key elements of a proper Leistungsbeschreibung
            const requiredElements = [
                'Leistungsbeschreibung',
                'Projektbeschreibung',
                'Anforderungen',
                'Kommune'
            ]
            
            const foundElements = requiredElements.filter(element => 
                cleanContent.toLowerCase().includes(element.toLowerCase())
            )
            
            console.log(`‚úÖ Found ${foundElements.length}/${requiredElements.length} required elements:`, foundElements)
            
        } else {
            console.log('‚ö†Ô∏è Generated content is too short or empty')
            console.log('Raw content:', content)
        }
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.message)
        
        if (error.message.includes('ECONNREFUSED')) {
            console.log('üí° Make sure OpenCode service is running on port 3001')
        }
    }
    
    console.log('=====================================')
    console.log('üèÅ OpenCode test completed')
}

// Run the test
testOpenCode()